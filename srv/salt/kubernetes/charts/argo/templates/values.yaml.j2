# -*- coding: utf-8 -*-
# vim: ft=jinja

{#- Get the `tplroot` from `tpldir` #}
{% from tpldir ~ "/map.jinja" import argo with context %}
{%- set public_domain = pillar['public-domain'] -%}
{% from "kubernetes/map.jinja" import storage with context %}
{% from "kubernetes/map.jinja" import charts with context %}
{% set cri_provider = salt['pillar.get']('kubernetes:common:cri:provider') %}

images:
  tag: v{{ argo.version }}

controller:
  {%- if not cri_provider == 'docker' %}
  containerRuntimeExecutor: pns
  {%- endif %}

  serviceMonitor:
    enabled: true
  
  extraEnv:
    - name: LEADER_ELECTION_IDENTITY
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name

useDefaultArtifactRepo: True
useStaticCredentials: True
artifactRepository:
  archiveLogs: True
  {%- if storage.get('minio_operator', {'enabled': False}).enabled %}
  s3:
    accessKeySecret:
      name: minio-creds-secret
      key: accesskey
    secretKeySecret:
      name: minio-creds-secret
      key: secretkey
    insecure: true
    bucket: {{ argo.s3.bucket }}
    endpoint: minio:9000
  {%- endif %}

{%- if not storage.get('minio_operator', {'enabled': False}).enabled %}
# NOTE: These are setting attributes for the `minio` optional dependency
minio:
  # If set to true then chart installs minio and generate according artifactRepository section in workflow controller config map
  install: True
  defaultBucket:
    enabled: true
    name: argo-artifacts
{%- endif %}

server:
  {% if charts.get('keycloak', {'enabled': False}).enabled %}
  {%- set keycloak_url = 'https://' + charts.get('keycloak', {}).get('ingress_host') + '.' + pillar['public-domain'] -%}
  {%- set realm = argo.oauth.get('keycloak', {}).get('realm') -%}
  extraArgs:
  - --auth-mode=sso
  - --secure=false
  sso:
    issuer: {{ keycloak_url }}/auth/realms/{{ realm }}
    # issuer: {{ keycloak_url }}/
    clientId:
      name: argo-server-sso
      key: client-id
    clientSecret:
      name: argo-server-sso
      key: client-secret
    redirectUrl: https://{{ argo.ingress_host }}.{{ public_domain }}/oauth2/callback
  {%- endif %}
