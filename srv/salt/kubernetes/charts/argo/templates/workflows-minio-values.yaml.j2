# -*- coding: utf-8 -*-
# vim: ft=jinja

{% from tpldir ~ "/map.jinja" import argo with context %}
{%- from "kubernetes/map.jinja" import common with context -%}
{%- from "kubernetes/map.jinja" import storage with context -%}
{%- if common.addons.get('nginx', {'enabled': False}).enabled  %}
  {%- set controller = "nginx" -%}
{%- elif common.addons.get('traefik', {'enabled': False}).enabled %}
  {%- set controller = "traefik" -%}
{%- elif common.addons.get('istio', {'enabled': False}).enabled %}
  {%- set controller = "istio" -%}
{%- elif common.addons.get('contour', {'enabled': False}).enabled %}
  {%- set controller = "contour" -%}
{%- endif -%}
{%- set public_domain = pillar['public-domain'] -%}
## Secret with default environment variable configurations to be used by MinIO Tenant.
## Not recommended for production deployments! Create the secret manually instead.
secrets:
  name: minio-env-configuration
  # MinIO root user and password
  accessKey: {{ argo.workflows.s3.minio.access_key}}
  secretKey: {{ argo.workflows.s3.minio.access_key}}

tenant:
  name: argo-workflows
  configuration:
    name: minio-env-configuration
  pools:
    - servers: 4
      name: pool0
      volumesPerserver: 1
      size: 5Gi
      {%- if storage.get('rook_ceph', {'enabled': False}).enabled %}
      storageClassName: ceph-block
      {%- elif storage.get('portworx', {'enabled': False}).enabled %}
      storageClassName: px-dedicated-sc
      {%- else%}
      storageClassName: ""
      {%- endif %}
ingress:
  api:
    enabled: {{ argo.workflows.s3.minio.ingress.enabled }}
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
    ingressClassName: {{ controller }}
    hosts:
      - {{ argo.workflows.s3.minio.ingress.host }}-api.{{ public_domain }}
    tls:
    - secretName: argo-workflows-minio-general-cert
      hosts:
        - {{ argo.workflows.s3.minio.ingress.host }}-api.{{ public_domain }}
  console:
    enabled: {{ argo.workflows.s3.minio.ingress.enabled }}
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
    ingressClassName: {{ controller }}
    hosts:
      - {{ argo.workflows.s3.minio.ingress.host }}.{{ public_domain }}
    tls:
    - secretName: argo-workflows-minio-general-cert
      hosts:
        - {{ argo.workflows.s3.minio.ingress.host }}.{{ public_domain }}
