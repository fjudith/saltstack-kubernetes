# -*- coding: utf-8 -*-
# vim: ft=jinja

{#- Get the `tplroot` from `tpldir` #}
{% from tpldir ~ "/map.jinja" import argo with context %}
{%- set public_domain = pillar['public-domain'] -%}
{%- from "kubernetes/map.jinja" import storage with context -%}
{%- from "kubernetes/map.jinja" import charts with context -%}
{%- from "kubernetes/map.jinja" import common with context -%}
{%- set cri_provider = salt['pillar.get']('kubernetes:common:cri:provider') -%}
{%- if common.addons.get('nginx', {'enabled': False}).enabled  %}
  {%- set controller = "nginx" -%}
{%- elif common.addons.get('traefik', {'enabled': False}).enabled %}
  {%- set controller = "traefik" -%}
{%- elif common.addons.get('istio', {'enabled': False}).enabled %}
  {%- set controller = "istio" -%}
{%- elif common.addons.get('contour', {'enabled': False}).enabled %}
  {%- set controller = "contour" -%}
{%- endif -%}
{%- set public_domain = pillar['public-domain'] -%}

images:
  tag: v{{ argo.workflows.version }}

## Custom resource configuration
crds:
  install: true

controller:
  {%- if not cri_provider == 'docker' %}
  containerRuntimeExecutor: pns
  {%- endif %}

  serviceMonitor:
    {%- if common.addons.get('kube_prometheus', {'enabled': False}).enabled %}
    enabled: true
    {%- endif %}
  
  extraEnv:
    - name: LEADER_ELECTION_IDENTITY
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name

useDefaultArtifactRepo: True
useStaticCredentials: True
artifactRepository:
  archiveLogs: True
  {%- if storage.get('minio_operator', {'enabled': False}).enabled %}
  s3:
    accessKeySecret:
      name: minio-env-configuration
      key: accesskey
    secretKeySecret:
      name: minio-env-configuration
      key: secretkey
    insecure: true
    bucket: {{ argo.workflows.s3.bucket }}
    endpoint: minio:9000
  {%- endif %}

{%- if not storage.get('minio_operator', {'enabled': False}).enabled %}
# NOTE: These are setting attributes for the `minio` optional dependency
minio:
  # If set to true then chart installs minio and generate according artifactRepository section in workflow controller config map
  install: True
  defaultBucket:
    enabled: true
    name: argo-artifacts
{%- endif %}

server:
  {%- if charts.get('keycloak', {'enabled': False}).enabled %}
  {%- set keycloak_url = 'https://' ~ charts.keycloak.ingress.host ~ '.' + pillar['public-domain'] %}
  extraArgs:
  - --auth-mode=sso
  - --secure=false
  sso:
    ## SSO configuration when SSO is specified as a server auth mode.
    ## All the values are required. SSO is activated by adding --auth-mode=sso
    ## to the server command line.
    #
    ## The root URL of the OIDC identity provider.
    issuer: {{ keycloak_url ~ "/realms/" ~ argo.workflows.oauth.keycloak.realm }}
    ## Name of a secret and a key in it to retrieve the app OIDC client ID from.
    clientId:
      name: argo-workflows-server-oauth2
      key: client-id
    ## Name of a secret and a key in it to retrieve the app OIDC client secret from.
    clientSecret:
      name: argo-workflows-server-oauth2
      key: client-secret
    ## The OIDC redirect URL. Should be in the form <argo-root-url>/oauth2/callback.
    redirectUrl: https://{{ argo.workflows.ingress.host }}.{{ public_domain }}/oauth2/callback
    rbac:
      enabled: true
    ## Scopes requested from the SSO ID provider.  The 'groups' scope requests
    ## group membership information, which is usually used for authorization
    ## decisions.
    scopes:
    - groups
  {%- endif %}

  ingress:
    enabled: {{ argo.workflows.ingress.enabled }}
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
    ingressClassName: {{ controller }}
    hosts:
      - {{ argo.workflows.ingress.host }}.{{ public_domain }}
    tls:
    - secretName: argoworkflows-general-cert
      hosts:
        - {{ argo.workflows.ingress.host }}.{{ public_domain }}
