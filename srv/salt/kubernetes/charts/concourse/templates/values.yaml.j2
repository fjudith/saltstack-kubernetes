# -*- coding: utf-8 -*-
# vim: ft=jinja

{#- Get the `tplroot` from `tpldir` #}
{% from tpldir ~ "/map.jinja" import concourse with context %}
{%- set public_domain = pillar['public-domain'] -%}
{%- from "kubernetes/map.jinja" import storage with context -%}
{%- from "kubernetes/map.jinja" import charts with context -%}
{%- from "kubernetes/map.jinja" import common with context -%}
{%- if common.addons.get('nginx', {'enabled': False}).enabled  %}
  {%- set controller = "nginx" -%}
{%- elif common.addons.get('traefik', {'enabled': False}).enabled %}
  {%- set controller = "traefik" -%}
{%- elif common.addons.get('istio', {'enabled': False}).enabled %}
  {%- set controller = "istio" -%}
{%- elif common.addons.get('contour', {'enabled': False}).enabled %}
  {%- set controller = "contour" -%}
{%- endif -%}
{%- set public_domain = pillar['public-domain'] -%}

imageTag: "{{ concourse.version }}"

rbac:
  create: True

{%- if storage.get('rook_ceph', {'enabled': False}).enabled or storage.get('portworx', {'enabled': False}).enabled %}
persistence:
  enabled: True
  worker:
    size: {{ concourse.worker_capacity }}
{%- endif %}

postgresql:
  enable: True
  password: {{ concourse.database.postgres.password }}
  {%- if storage.get('rook_ceph', {'enabled': False}).enabled or storage.get('portworx', {'enabled': False}).enabled %}
  persistence:
    enabled: True
    size: {{ concourse.database.postgres.size }}
  {%- endif %}

concourse:
  worker:
    replicas: 2
    baggageclaim:
      driver: detect
    
    {%- if common.cri.provider == "docker" or common.cri.provider == "containerd" %}
    runtime: containerd
    {%- endif %}

  web:
    replicas: 1
    externalUrl: https://{{ concourse.ingress.host }}.{{ public_domain }}
    prometheus:
      enabled: True
      bindIp: "0.0.0.0"
      bindPort: 9391
      {%- if charts.get('kube_prometheus', {'enabled': False}).enabled %}
      serviceMonitor:
        enabled: True
      {%- endif %}
  
    {%- if charts.get('keycloak', {'enabled': False}).enabled %}
    {%- set keycloak_url = 'https://' ~ charts.keycloak.ingress.host ~ '.' ~ pillar['public-domain'] %}
    auth:
      mainTeam:
        oauth:
          user: admin
          group: concourse-admins
      oauth:
        enabled: True
        displayname: keycloak
        authUrl: {{ keycloak_url }}/realms/{{ concourse.oauth.keycloak.realm }}/protocol/openid-connect/auth  
        tokenUrl: {{ keycloak_url }}/realms/{{ concourse.oauth.keycloak.realm }}/protocol/openid-connect/token
        userinfoUrl: {{ keycloak_url }}/realms/{{ concourse.oauth.keycloak.realm }}/protocol/openid-connect/userinfo
        scope: openid
        groupsKey: groups
        # useCaCert:
        # skipSslValidation:
        userIdKey: userid
        userNameKey: username
    localAuth:
      enabled: True
    {%- endif %}
secrets:
  create: True
  {%- if charts.get('keycloak', {'enabled': False}).enabled %}
  {%- set keycloak_url = 'https://' ~ charts.keycloak.ingress.host ~ '.' ~ pillar['public-domain'] %}
  {%- set keycloak_username = salt['cmd.shell']('kubectl -n keycloak get configmap keycloak-env-vars --output=jsonpath="{.data.KEYCLOAK_ADMIN}"') %}
  {%- set keycloak_password = salt['cmd.shell']('kubectl -n keycloak get secret keycloak --output=jsonpath="{.data.admin-password}" | base64 -d') %}
  {%- set client_id         = concourse.oauth.keycloak.client_id %}
  {%- set client_secret     = salt['cmd.shell']('/srv/keycloak/scripts/kc-clientsecret.sh' + ' ' + keycloak_username + ' ' + keycloak_password + ' ' + keycloak_url + ' ' + concourse.oauth.keycloak.realm + ' ' + client_id) %}
  oauthClientId: {{ client_id }}
  oauthClientSecret: {{ client_secret }}
  {%- endif %}
  localUsers: admin:{{ concourse.admin_password }},
    {%- if charts.get('spinnaker', {'enabled': False}).enabled -%}
    {{ charts.spinnaker.concourse.username }}:{{ charts.spinnaker.concourse.password }}
    {%- endif %}
  

web:
  replicas: 2
  ingress:
    enabled: {{ concourse.ingress.enabled }}
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
    ingressClassName: {{ controller }}
    hosts:
      - {{ concourse.ingress.host }}.{{ public_domain }}
    tls:
    - secretName: concourse-general-cert
      hosts:
        - {{ concourse.ingress.host }}.{{ public_domain }}

worker:
  replicas: 2
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"