# -*- coding: utf-8 -*-
# vim: ft=jinja

{#- Get the `tplroot` from `tpldir` #}
{% from tpldir ~ "/map.jinja" import falco with context %}
{%- from "kubernetes/map.jinja" import common with context -%}

image:
  tag: {{ falco.version }}

{%- if common.cri.provider == "docker" %}
docker:
  enabled: true
  socket: /var/run/docker.sock
{%- elif common.cri.provider == "containerd" %}
containerd:
   enabled: true
   socket: /run/containerd/containerd.sock
{%- endif %}

rbac:
  # Create and use rbac resources
  create: true

podSecurityPolicy:
  # Create a podSecurityPolicy
  create: {{ falco.pod_security_policy }}

proxy:
  httpProxy: {{ falco.http_proxy }}
  httpsProxy: {{ falco.https_proxy }}
  noProxy: {{ falco.no_proxy }}

ebpf:
  # Enable eBPF support for Falco
  {%- if common.cni.provider == "cilium" %}
  enabled: true
  {%- else %}
  enabled: {{ falco.ebpf.enable }}
  {%- endif %}
  
auditLog: 
  # true here activates the K8s Audit Log feature for Falco
  enabled: {{ falco.audit_log.enable }}
  
  dynamicBackend:
    # true here configures an AuditSink who will receive the K8s audit logs
    enabled: {{ falco.audit_log.dynamic_backend_enable }}

{%- if common.addons.get('nats_operator', {'enabled': False}).enabled %}
integrations:
  natsOutput:
    enabled: true
    natsUrl: "nats://nats-cluster.nats-io:4222"
{%- endif %}

# Allow falco to run on Kubernetes 1.6 masters.
tolerations:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
  - effect: NoSchedule
    key: node-role.kubernetes.io
    operator: Equal
    value: ingress

falco:
  # Falco supports running a gRPC server with two main binding types
  # 1. Over the network with mandatory mutual TLS authentication (mTLS)
  # 2. Over a local unix socket with no authentication
  # By default, the gRPC server is disabled, with no enabled services (see grpc_output)
  # please comment/uncomment and change accordingly the options below to configure it.
  # Important note: if Falco has any troubles creating the gRPC server
  # this information will be logged, however the main Falco daemon will not be stopped.
  # gRPC server over network with (mandatory) mutual TLS configuration.
  # This gRPC server is secure by default so you need to generate certificates and update their paths here.
  # By default the gRPC server is off.
  # You can configure the address to bind and expose it.
  # By modifying the threadiness configuration you can fine-tune the number of threads (and context) it will use.
  grpc:
    enabled: true
    threadiness: 0

    # gRPC unix socket with no authentication
    # unixSocketPath: ""
    unixSocketPath: "unix:///var/run/falco/falco.sock"
    
    # gRPC over the network (mTLS) / required when unixSocketPath is empty
    # listenPort: 5060
    # privateKey: "/etc/falco/certs/server.key"
    # certChain: "/etc/falco/certs/server.crt"
    # rootCerts: "/etc/falco/certs/ca.crt"

  # gRPC output service.
  # By default it is off.
  # By enabling this all the output events will be kept in memory until you read them with a gRPC client.
  # Make sure to have a consumer for them or leave this disabled.
  grpcOutput:
    enabled: true
