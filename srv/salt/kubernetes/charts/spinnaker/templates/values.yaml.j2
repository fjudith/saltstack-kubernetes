# -*- coding: utf-8 -*-
# vim: ft=jinja

{#- Get the `tplroot` from `tpldir` #}
{% from tpldir ~ "/map.jinja" import spinnaker with context %}
{%- from "kubernetes/map.jinja" import storage with context -%}
{%- from "kubernetes/map.jinja" import charts with context -%}
{%- from "kubernetes/map.jinja" import common with context -%}
{%- if common.addons.get('nginx', {'enabled': False}).enabled  %}
  {%- set controller = "nginx" -%}
{%- elif common.addons.get('traefik', {'enabled': False}).enabled %}
  {%- set controller = "traefik" -%}
{%- elif common.addons.get('istio', {'enabled': False}).enabled %}
  {%- set controller = "istio" -%}
{%- elif common.addons.get('contour', {'enabled': False}).enabled %}
  {%- set controller = "contour" -%}
{%- endif -%}
{%- set public_domain = pillar['public-domain'] -%}

halyard:
  gitops:
    enabled: false
  spinnakerVersion: {{ spinnaker.version }}
  image:
    tag: {{ spinnaker.halyard_version }}
  additionalProfileConfigMaps:
    data:
      front50-local.yml: |-
        spinnaker:
          s3:
            path-style-access: true
            versioning: false      
      gate-local.yml: |-
        server:
          tomcat:
            protocolHeader: X-Forwarded-Proto
            remoteIpHeader: X-Forwarded-For
            internalProxies: .*
            httpsServerPort: X-Forwarded-Port
  additionalSecrets:
    create: true
    {%- if spinnaker.get('github', {'enabled': False}).enabled %}
    data:
      github.token: {{ spinnaker.github.token | base64_encode }} # Github API key (repo permission only)
    {%- endif %}
  additionalConfigMaps:
    create: true
    data:
      config.src: |-
        DECK_URL="https://{{ spinnaker.ingress.host }}.{{ public_domain }}" # Url to access your deck 
        GATE_URL="https://{{ spinnaker.ingress.host }}-gate.{{ public_domain }}" # URL to access your gate
      
  additionalScripts:
    create: true
    data:
      00-configure_url.sh: |-
        source /opt/halyard/additionalConfigMaps/config.src
        
        $HAL_COMMAND config security ui edit --override-base-url "${DECK_URL}"
        $HAL_COMMAND config security api edit --override-base-url "${GATE_URL}"
      01-configure_github.sh: |-
        TOKEN_FILE=/opt/halyard/additionalSecrets/github.token
        ARTIFACT_ACCOUNT_NAME=github-artifact-account

        if $HAL_COMMAND config artifact github account get ${ARTIFACT_ACCOUNT_NAME}; then
          PROVIDER_COMMAND='edit'
        else
          PROVIDER_COMMAND='add'
        fi

        $HAL_COMMAND config features edit --artifacts true
        $HAL_COMMAND config artifact github enable
        $HAL_COMMAND config artifact github account ${PROVIDER_COMMAND} ${ARTIFACT_ACCOUNT_NAME} --token-file ${TOKEN_FILE}
      
      {%- if charts.get('keycloak', {'enabled': False}).enabled %}
      {%- set keycloak_url = 'https://' ~ charts.keycloak.ingress.host ~ '.' ~ pillar['public-domain'] %}
      {%- set keycloak_username = salt['cmd.shell']('kubectl -n keycloak get configmap keycloak-env-vars --output=jsonpath="{.data.KEYCLOAK_ADMIN}"') %}
      {%- set keycloak_password = salt['cmd.shell']('kubectl -n keycloak get secret keycloak --output=jsonpath="{.data.admin-password}" | base64 -d') %}
      {%- set client_id         = spinnaker.oauth.keycloak.client_id %}
      {%- set client_secret     = salt['cmd.shell']('/srv/keycloak/scripts/kc-clientsecret.sh' + ' ' + keycloak_username + ' ' + keycloak_password + ' ' + keycloak_url + ' ' + spinnaker.oauth.keycloak.realm + ' ' + client_id) %}
      02-configure_oauth2.sh: |-
        source /opt/halyard/additionalConfigMaps/config.src
        
        $HAL_COMMAND config security authn oauth2 edit --access-token-uri "{{ keycloak_url }}/realms/{{ spinnaker.oauth.keycloak.realm }}/protocol/openid-connect/token"
        # $HAL_COMMAND config security authn oauth2 edit --client-authentication-scheme
        $HAL_COMMAND config security authn oauth2 edit --client-id "spinnaker"
        $HAL_COMMAND config security authn oauth2 edit --client-secret "{{ client_secret }}"
        # $HAL_COMMAND config security authn oauth2 edit --deployment
        $HAL_COMMAND config security authn oauth2 edit --pre-established-redirect-uri "${GATE_URL}/login"
        # $HAL_COMMAND config security authn oauth2 edit --pre-established-redirect-uri "${DECK_URL}/gate/login"
        $HAL_COMMAND config security authn oauth2 edit --provider other
        # $HAL_COMMAND config security authn oauth2 edit --scope
        $HAL_COMMAND config security authn oauth2 edit --user-authorization-uri "{{ keycloak_url }}/realms/{{ spinnaker.oauth.keycloak.realm }}/protocol/openid-connect/auth"
        $HAL_COMMAND config security authn oauth2 edit --user-info-mapping-email "email"
        $HAL_COMMAND config security authn oauth2 edit --user-info-mapping-first-name "firstName"
        $HAL_COMMAND config security authn oauth2 edit --user-info-mapping-last-name "lastName"
        $HAL_COMMAND config security authn oauth2 edit --user-info-mapping-username "username"
        # $HAL_COMMAND config security authn oauth2 edit --user-info-requirements  
        $HAL_COMMAND config security authn oauth2 edit --user-info-uri "{{ keycloak_url }}/realms/{{ spinnaker.oauth.keycloak.realm }}/protocol/openid-connect/userinfo"
        $HAL_COMMAND config security authn oauth2 enable
      {% endif %}
      {% if common.addons.get('kube_prometheus', {'enabled': False}).enabled %}
      03-configure_prometheus.sh: |-
        $HAL_COMMAND config metric-stores prometheus enable
      04-configure_canary.sh: |-
        # Configure kayenta microservice for Prometheus
        TOKEN_FILE=/opt/halyard/additionalSecrets/prometheus.token
        CANARY_ACCOUNT_NAME=prometheus-metrics-account

        if $HAL_COMMAND config canary prometheus account get ${CANARY_ACCOUNT_NAME}; then
          PROVIDER_COMMAND='edit'
        else
          PROVIDER_COMMAND='add'
        fi

        $HAL_COMMAND config canary edit --default-metrics-store prometheus
        $HAL_COMMAND config canary prometheus account ${PROVIDER_COMMAND} ${CANARY_ACCOUNT_NAME} --base-url https://prometheus-k8s.monitoring:9090
        $HAL_COMMAND config canary enable
      {% endif %}
      {% if charts.get('concourse', {'enabled': False}).enabled %}
      05-configure_concouse.sh: |-
        # Configure Kubernetes cluster internal Concourse instance
        USERNAME={{ spinnaker.concourse.username }}
        PASSWORD={{ spinnaker.concourse.password }}
        INSTANCE=internal
        URL='http://concourse-web.concourse:8080'

        if $HAL_COMMAND config ci concourse master get ${INSTANCE}; then
          PROVIDER_COMMAND='edit'
        else
          PROVIDER_COMMAND='add'
        fi

        $HAL_COMMAND config ci concourse master ${PROVIDER_COMMAND} ${INSTANCE} --url ${URL} --username ${USERNAME} --password ${PASSWORD}
        $HAL_COMMAND config ci concourse enable
      {% endif %}

minio:
{%- if storage.get('minio', {'enabled': False}).enabled %}
  enabled: false

s3:
  enabled: true
  bucket: spinnaker
  endpoint: http://minio:9000
  accessKey: {{ spinnaker.s3.minio.access_key }}
  secretKey: {{ spinnaker.s3.minio.secret_key }}        
{% else %}
  enabled: true
  persistence:
    enabled: true
{% endif -%}

dockerRegistries:
- name: dockerhub
  address: index.docker.io
  repositories:
   - library/alpine
   - library/ubuntu
   - library/centos
   - library/nginx
   - fjudith/spinnaker-sample-app
   - fjudith/draw.io
{% if charts.get('harbor', {'enabled': False}).enabled %}
- name: harbor
  address: {{ charts.harbor.ingress.host }}.{{ public_domain }}
  username: admin
  password: {{ charts.harbor.admin_password }}
{% endif %}

spinnakerFeatureFlags:
  - artifacts

redis:
  enabled: true
  cluster:
    enabled: true
  master:
    persistence:
      enabled: true
    disableCommands: []
  slave:
    disableCommands: []
  sentinel:
    enabled: false

ingress:
  enabled: {{ spinnaker.ingress.enabled }}
  className: {{ controller }}
  host: {{ spinnaker.ingress.host }}.{{ public_domain }}
  annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
  tls:
  - secretName: spinnaker-general-cert
    hosts:
    - {{ spinnaker.ingress.host }}.{{ public_domain }}

ingressGate:
  enabled: {{ spinnaker.ingress.enabled }}
  # host: gate.spinnaker.example.org
  host: {{ spinnaker.ingress.host }}-gate.{{ public_domain }}
  annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
  tls:
  - secretName: spinnaker-gate-general-cert
    hosts:
    - {{ spinnaker.ingress.host }}-gate.{{ public_domain }}

