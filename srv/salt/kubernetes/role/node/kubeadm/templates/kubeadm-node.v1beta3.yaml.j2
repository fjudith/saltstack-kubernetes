# -*- coding: utf-8 -*-
# vim: ft=jinja

{% from tpldir ~ "/map.jinja" import kubeadm with context %}
{%- set hostname = salt['grains.get']('fqdn') -%}
{%- set public_domain = pillar['public-domain'] -%}
{%- set clusterHost = pillar['cluster-host'] -%}
{%- set controlPlaneInterface = pillar['controlPlaneInterface'] -%}
{%- set localIpAddress = salt['network.ip_addrs'](controlPlaneInterface) -%}
{%- from "kubernetes/map.jinja" import common with context -%}
{%- from "kubernetes/map.jinja" import storage with context -%}
{%- from "kubernetes/map.jinja" import charts with context -%}

{%- set masters = [] -%}
{%- for key, value in salt['mine.get'](tgt="role:master", fun="network.get_hostname", tgt_type="grain")|dictsort(false, 'value') -%}
  {%- do masters.append(value) -%}
{%- endfor -%}

{%- if masters|length == 1 -%}
  {%- set controlPlaneAddress = masters|first  -%}
{%- else-%}
  {%- set controlPlaneAddress = clusterHost ~ '.' ~ public_domain -%}
{% endif %}

{%- set nodeLabels = "node.kubernetes.io/role=node" -%}
{%- if storage.get('rook_ceph', {'enabled': False}).enabled or storage.get('rook_edgefs', {'enabled': False}).enabled -%}
  {%- set nodeLabels = nodeLabels + ',' + "role=storage-node" -%}
{%- endif -%}

apiVersion: kubeadm.k8s.io/v1beta3
caCertPath: {{ kubeadm.caCertPath }}
discovery:
  bootstrapToken:
    apiServerEndpoint: {{ controlPlaneAddress ~ ':' ~ kubeadm.bindPort }}
    token: {{ kubeadm.token }}
    unsafeSkipCAVerification: true
  timeout: {{ kubeadm.timeout }}
  tlsBootstrapToken: {{ kubeadm.nodeToken }}
kind: JoinConfiguration
nodeRegistration:
  name: {{ hostname }}
  criSocket: {{ kubeadm.criSocket }}
  taints: []
  kubeletExtraArgs:
    node-labels: "{{ nodeLabels }}"
    
    {%- for argument, value in (kubeadm.kubeletExtraArgs).items() %}
    {{ argument }}: "{{ value }}"
    {% endfor %}
